name: Distribution Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    paths:
      - 'distributions/dockerhub/**'
      - 'distributions/bittorrent/**'
      - 'startup/**'
      - '.github/workflows/**'
      - 'docs/**'
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  dockerhub:
    runs-on: ubuntu-22.04
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
      image_changed: ${{ steps.check_changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for Dockerfile changes
        id: check_changes
        run: |
          CHANGED=false
          if git diff --name-only HEAD^ HEAD | grep -q "distributions/dockerhub/Dockerfile\|startup/"; then
            CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
      
      - name: Set up Docker layer caching
        if: steps.check_changes.outputs.changed == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to DockerHub
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Copy startup scripts
        if: steps.check_changes.outputs.changed == 'true'
        run: cp -r startup distributions/dockerhub/
      
      - name: Build and push Docker image
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./distributions/dockerhub
          file: ./distributions/dockerhub/Dockerfile
          push: true
          tags: |
            cmoe640/dev-environment:latest
            cmoe640/dev-environment:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      - name: Move cache
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Prepare Artifacts
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          mkdir -p artifacts/dockerhub
          echo '{
            "version": "${{ github.sha }}",
            "image": "cmoe640/dev-environment:${{ github.sha }}",
            "date": "'$(date -u +"%Y-%m-%d %H:%M UTC")'",
            "changes": true
          }' > artifacts/dockerhub/image-info.json
      
      - name: Prepare No-Change Artifacts
        if: steps.check_changes.outputs.changed != 'true'
        run: |
          mkdir -p artifacts/dockerhub
          echo '{
            "version": "${{ github.sha }}",
            "image": "cmoe640/dev-environment:latest",
            "date": "'$(date -u +"%Y-%m-%d %H:%M UTC")'",
            "changes": false
          }' > artifacts/dockerhub/image-info.json
      
      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: dockerhub-artifacts
          path: artifacts/dockerhub/
          retention-days: 1

  bittorrent:
    runs-on: ubuntu-22.04
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
      torrent_changed: ${{ steps.check_changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for Dockerfile or script changes
        id: check_changes
        run: |
          CHANGED=false
          if git diff --name-only HEAD^ HEAD | grep -q "distributions/bittorrent/\|startup/"; then
            CHANGED=true
          fi
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Set up environment
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y transmission-cli

      - name: Set up Docker layer caching
        if: steps.check_changes.outputs.changed == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-bittorrent
          key: ${{ runner.os }}-buildx-bittorrent-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bittorrent-

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Copy startup scripts
        if: steps.check_changes.outputs.changed == 'true'
        run: cp -r startup distributions/bittorrent/
      
      - name: Build Docker image
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./distributions/bittorrent
          load: true
          tags: dev-environment:latest
          cache-from: type=local,src=/tmp/.buildx-cache-bittorrent
          cache-to: type=local,dest=/tmp/.buildx-cache-bittorrent-new,mode=max
      
      - name: Move cache
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          rm -rf /tmp/.buildx-cache-bittorrent
          mv /tmp/.buildx-cache-bittorrent-new /tmp/.buildx-cache-bittorrent
      
      - name: Create and seed torrent
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          cd distributions/bittorrent
          docker save dev-environment:latest > dev-environment.tar
          chmod +x scripts/torrent/create-torrent.sh
          chmod +x scripts/torrent/generate-magnet.sh
          ./scripts/torrent/create-torrent.sh
          ./scripts/torrent/generate-magnet.sh
      
      - name: Generate checksum
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          cd distributions/bittorrent
          sha256sum dev-environment.tar > checksum.txt

      - name: Prepare No-Change Artifacts
        if: steps.check_changes.outputs.changed != 'true'
        run: |
          mkdir -p artifacts/bittorrent
          echo '{
            "version": "${{ github.sha }}",
            "date": "'$(date -u +"%Y-%m-%d %H:%M UTC")'",
            "changes": false,
            "message": "No changes detected, using existing torrent"
          }' > artifacts/bittorrent/info.json
      
      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: bittorrent-artifacts
          path: |
            ${{ steps.check_changes.outputs.changed == 'true' && 'distributions/bittorrent/dev-environment.tar' || '' }}
            ${{ steps.check_changes.outputs.changed == 'true' && 'distributions/bittorrent/dev-environment.torrent' || '' }}
            ${{ steps.check_changes.outputs.changed == 'true' && 'distributions/bittorrent/checksum.txt' || '' }}
            ${{ steps.check_changes.outputs.changed == 'true' && 'distributions/bittorrent/magnet.txt' || '' }}
            ${{ steps.check_changes.outputs.changed != 'true' && 'artifacts/bittorrent/info.json' || '' }}

  security-scan:
    needs: [dockerhub, bittorrent]
    name: Security Analysis
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Shell Script Analysis
      - name: Run ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          mkdir -p sarif-output
          find . -type f -name "*.sh" -exec \
            shellcheck --format=sarif {} \; > sarif-output/shellcheck.sarif

      # Dockerfile Analysis
      - name: Run Hadolint
        run: |
          wget -q https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          mkdir -p sarif-output
          find . -type f -name "Dockerfile" -exec \
            ./hadolint-Linux-x86_64 --format sarif {} \; > sarif-output/hadolint.sarif

      # Rust Code Analysis
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run Clippy
        run: |
          cd e2e
          cargo clippy --message-format=json > ../sarif-output/clippy.json
          
      - name: Convert Clippy JSON to SARIF
        run: |
          jq --null-input --slurpfile clippy sarif-output/clippy.json \
          '{
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "clippy",
                  "informationUri": "https://rust-lang.github.io/rust-clippy/",
                  "rules": []
                }
              },
              "results": ($clippy | map(select(.message.level == "warning" or .message.level == "error") | {
                "ruleId": .message.code.code,
                "level": .message.level,
                "message": { "text": .message.message },
                "locations": [{
                  "physicalLocation": {
                    "artifactLocation": { "uri": .target.src_path },
                    "region": {
                      "startLine": .spans[0].line_start,
                      "startColumn": .spans[0].column_start,
                      "endLine": .spans[0].line_end,
                      "endColumn": .spans[0].column_end
                    }
                  }
                }]
              }))
            }]
          }' > sarif-output/clippy_final.sarif

      # Validate SARIF files
      - name: Validate SARIF files
        run: |
          for file in sarif-output/*.sarif; do
            echo "Validating $file"
            if ! jq empty "$file" 2>/dev/null; then
              echo "Error: Invalid SARIF file: $file"
              exit 1
            fi
          done

      # Upload all SARIF files
      - name: Upload Shell Script Analysis
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-output/shellcheck.sarif
          category: "/language:shell"

      - name: Upload Dockerfile Analysis
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-output/hadolint.sarif
          category: "/language:dockerfile"

      - name: Upload Rust Analysis
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-output/clippy_final.sarif
          category: "/language:rust"

      - name: Create Security Scan Summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The security scan has completed. View the results at:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. [Code Scanning Results](https://github.com/${{ github.repository }}/security/code-scanning?query=is:open+branch:${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "2. [Security Overview](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Analysis Tools" >> $GITHUB_STEP_SUMMARY
          echo "- Shell Scripts: ShellCheck" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfiles: Hadolint" >> $GITHUB_STEP_SUMMARY
          echo "- Rust Code: Clippy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Run ID: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Post Notification
        if: always()
        run: |
          echo "::notice title=Security Scan Results::View the analysis results at https://github.com/${{ github.repository }}/security/code-scanning?query=is:open+branch:${{ github.ref_name }}"

  e2e-tests:
    needs: [security-scan]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      # Download artifacts from previous jobs
      - name: Download DockerHub artifacts
        uses: actions/download-artifact@v4
        with:
          name: dockerhub-artifacts
          path: artifacts/dockerhub

      - name: Download BitTorrent artifacts
        uses: actions/download-artifact@v4
        with:
          name: bittorrent-artifacts
          path: artifacts/bittorrent
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          
      - name: Set Rust toolchain outputs
        id: rust-toolchain
        run: |
          echo "rustc=$(rustc -V)" >> $GITHUB_OUTPUT
          echo "cargo=$(cargo -V)" >> $GITHUB_OUTPUT
          echo "rustup=$(rustup -V)" >> $GITHUB_OUTPUT

      - name: Get image info
        id: image_info
        run: |
          IMAGE_TAG=$(jq -r '.image' artifacts/dockerhub/image-info.json)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Build e2e tests
        run: |
          cd e2e
          cargo build --release
          
      - name: Run Creator Tests
        run: |
          cd e2e
          cargo run --release -- creator \
            --dockerfile "$(pwd)/../distributions/dockerhub/Dockerfile" \
            --dockerhub-repo "cmoe640/dev-environment"
            
      - name: Run User Tests
        run: |
          cd e2e
          cargo run --release -- user \
            --dockerhub-image "${{ steps.image_info.outputs.image_tag }}" \
            --torrent-file "../artifacts/bittorrent/dev-environment.torrent" \
            --checksum-file "../artifacts/bittorrent/checksum.txt"

  create_release:
    needs: [e2e-tests]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Set release info
        id: release_info
        run: |
          if [[ ${{ github.ref }} == refs/heads/develop ]]; then
            echo "version=$(date +'%Y.%m.%d')-beta" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=Beta Release" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=Stable Release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          name: "${{ steps.release_info.outputs.release_type }} ${{ steps.release_info.outputs.version }}"
          body: |
            ## ${{ steps.release_info.outputs.release_type }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Distribution Methods
            - DockerHub: `cmoe640/dev-environment:${{ steps.release_info.outputs.version }}`
            - BitTorrent: See attached files
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}
          files: |
            distributions/bittorrent/dev-environment.torrent
            distributions/bittorrent/magnet.txt
            distributions/bittorrent/checksum.txt
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-on-failure:
    if: failure()
    needs: [dockerhub, bittorrent, security-scan, e2e-tests, create_release]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Revert commit
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git revert ${{ github.sha }} --no-edit
          git push 