name: Distribution Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    paths:
      - 'distributions/dockerhub/**'
      - 'distributions/bittorrent/**'
      - 'startup/**'
      - '.github/workflows/**'
      - 'docs/**'
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  dockerhub:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Copy startup scripts
        run: cp -r startup distributions/dockerhub/
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./distributions/dockerhub
          file: ./distributions/dockerhub/Dockerfile
          push: true
          tags: |
            cmoe640/dev-environment:latest
            cmoe640/dev-environment:${{ github.sha }}
      
      - name: Prepare Artifacts
        run: |
          mkdir -p artifacts/dockerhub
          echo '{
            "version": "${{ github.sha }}",
            "image": "cmoe640/dev-environment:${{ github.sha }}",
            "date": "'$(date -u +"%Y-%m-%d %H:%M UTC")'"
          }' > artifacts/dockerhub/image-info.json
      
      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: dockerhub-artifacts
          path: artifacts/dockerhub/
          retention-days: 1

  bittorrent:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y transmission-cli
      
      - name: Copy startup scripts
        run: cp -r startup distributions/bittorrent/
      
      - name: Build Docker image
        run: |
          cd distributions/bittorrent
          docker build -t dev-environment:latest .
      
      - name: Create and seed torrent
        run: |
          cd distributions/bittorrent
          docker save dev-environment:latest > dev-environment.tar
          chmod +x scripts/torrent/create-torrent.sh
          chmod +x scripts/torrent/generate-magnet.sh
          ./scripts/torrent/create-torrent.sh
          ./scripts/torrent/generate-magnet.sh
      
      - name: Generate checksum
        run: |
          cd distributions/bittorrent
          sha256sum dev-environment.tar > checksum.txt
      
      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: bittorrent-artifacts
          path: |
            distributions/bittorrent/dev-environment.tar
            distributions/bittorrent/dev-environment.torrent
            distributions/bittorrent/checksum.txt
            distributions/bittorrent/magnet.txt

  e2e-tests:
    needs: [dockerhub, bittorrent]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          
      - name: Set Rust toolchain outputs
        id: rust-toolchain
        run: |
          echo "rustc=$(rustc -V)" >> $GITHUB_OUTPUT
          echo "cargo=$(cargo -V)" >> $GITHUB_OUTPUT
          echo "rustup=$(rustup -V)" >> $GITHUB_OUTPUT
          
      - name: Generate version
        id: version
        run: |
          # Get latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Parse major.minor.patch
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          # Set output
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "name=Release $NEW_VERSION - Updated E2E tests and Docker build" >> $GITHUB_OUTPUT
          
      - name: Build e2e tests
        run: |
          cd e2e
          cargo build --release
          
      - name: Run Creator Tests
        run: |
          cd e2e
          cargo run --release -- creator \
            --dockerfile "$(pwd)/../distributions/dockerhub/Dockerfile" \
            --dockerhub-repo "cmoe640/dev-environment"
            
      - name: Run User Tests
        run: |
          cd e2e
          cargo run --release -- user \
            --dockerhub-image "cmoe640/dev-environment:${{ github.sha }}" \
            --torrent-file "../artifacts/bittorrent/dev-environment.torrent" \
            --checksum-file "../artifacts/bittorrent/checksum.txt"

  create_release:
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set release info
        id: release_info
        run: |
          if [[ ${{ github.ref }} == refs/heads/develop ]]; then
            echo "version=$(date +'%Y.%m.%d')-beta" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=Beta Release" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=Stable Release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          name: "${{ steps.release_info.outputs.release_type }} ${{ steps.release_info.outputs.version }}"
          body: |
            ## ${{ steps.release_info.outputs.release_type }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Distribution Methods
            - DockerHub: `cmoe640/dev-environment:${{ steps.release_info.outputs.version }}`
            - BitTorrent: See attached files
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}
          files: |
            distributions/bittorrent/dev-environment.torrent
            distributions/bittorrent/magnet.txt
            distributions/bittorrent/checksum.txt
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 