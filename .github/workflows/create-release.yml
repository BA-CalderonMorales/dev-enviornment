name: Create Comprehensive Release

on:
  workflow_run:
    workflows: ['E2E Integration Tests']
    types:
      - completed
    branches: [main, develop]

# Add permissions block
permissions:
  actions: write    # Required for cancelling workflows
  contents: write   # Required for creating releases
  packages: write   # Required for package operations

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-e2e-status:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
      message: ${{ steps.check.outputs.message }}
    steps:
      - id: check
        name: Analyze E2E Test Result
        run: |
          STATUS="${{ github.event.workflow_run.conclusion }}"
          
          case "$STATUS" in
            "success")
              echo "status=proceed" >> $GITHUB_OUTPUT
              echo "message=E2E tests passed successfully" >> $GITHUB_OUTPUT
              ;;
            "cancelled")
              echo "status=cancelled" >> $GITHUB_OUTPUT
              echo "message=E2E tests were cancelled - prerequisites not met" >> $GITHUB_OUTPUT
              ;;
            "failure")
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "message=E2E tests failed" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "status=unknown" >> $GITHUB_OUTPUT
              echo "message=Unexpected E2E test status: $STATUS" >> $GITHUB_OUTPUT
              ;;
          esac

  create-release:
    needs: check-e2e-status
    if: needs.check-e2e-status.outputs.status == 'proceed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Distribution Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p artifacts/{bittorrent,dockerhub}
          
          echo "üì• Downloading artifacts from E2E workflow..."
          
          # Download BitTorrent artifacts
          if ! gh run download ${{ github.event.workflow_run.id }} \
            --name bittorrent-artifacts \
            --dir artifacts/bittorrent; then
            echo "‚ùå Failed to download BitTorrent artifacts"
            exit 1
          fi
            
          # Download DockerHub artifacts
          if ! gh run download ${{ github.event.workflow_run.id }} \
            --name dockerhub-artifacts \
            --dir artifacts/dockerhub; then
            echo "‚ùå Failed to download DockerHub artifacts"
            exit 1
          fi
          
          echo "‚úÖ Successfully downloaded all artifacts"

      # Verify artifacts are present
      - name: Verify Artifacts
        run: |
          echo "Verifying required artifacts..."
          
          if [ ! -f "artifacts/bittorrent/dev-environment.torrent" ]; then
            echo "‚ùå BitTorrent torrent file missing"
            exit 1
          fi
          
          if [ ! -f "artifacts/bittorrent/magnet.txt" ]; then
            echo "‚ùå BitTorrent magnet link file missing"
            exit 1
          fi
          
          if [ ! -f "artifacts/dockerhub/image-info.json" ]; then
            echo "‚ùå DockerHub image info missing"
            exit 1
          fi
          
          echo "‚úÖ All required artifacts present"

      # Generate release notes
      - name: Generate Release Notes
        run: |
          {
            echo "# üöÄ Development Environment Release"
            echo ""
            echo "## ‚ö†Ô∏è Important Notes"
            echo "- This is an automated release of the development environment"
            echo "- Distribution methods have varying reliability:"
            echo "  - DockerHub: Subject to Docker's rate limiting policies"
            echo "  - BitTorrent: Dependent on peer availability and network conditions"
            echo "- Users should not rely solely on this repository for production environments"
            echo "- Consider building and hosting your own images for commercial use"
            echo ""
            echo "## üîÑ Distribution Methods"
            echo ""
            echo "### DockerHub Distribution"
            echo "- Image: \`cmoe640/dev-environment:${GITHUB_SHA}\`"
            echo "- Status: Available (subject to rate limits)"
            echo "- Pull Command: \`docker pull cmoe640/dev-environment:${GITHUB_SHA}\`"
            echo ""
            echo "### BitTorrent Distribution"
            echo "- Magnet Link: $(cat artifacts/bittorrent/magnet.txt)"
            echo "- Torrent File: Attached to this release"
            echo "- Status: Experimental"
            echo ""
            echo "## üõ†Ô∏è Included Tools"
            echo "$(cat artifacts/dockerhub/image-info.json | jq -r '.tools')"
            echo ""
            echo "## üìù Usage Notes"
            echo "- For personal/development use only"
            echo "- Test thoroughly before using in any production environment"
            echo "- Consider security implications of using pre-built environments"
            echo ""
            echo "## üîç Verification"
            echo "- E2E Tests Passed: ‚úÖ"
            echo "- Build Date: $(date -u +"%Y-%m-%d %H:%M UTC")"
            echo "- Commit: ${GITHUB_SHA}"
          } > RELEASE_NOTES.md

      # Create GitHub release
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(date +%Y%m%d%H%M)
          gh release create "v${VERSION}" \
            --title "Development Environment v${VERSION}" \
            --notes-file RELEASE_NOTES.md \
            artifacts/bittorrent/dev-environment.torrent \
            artifacts/dockerhub/image-info.json

      # Cleanup
      - name: Cleanup
        if: always()
        run: rm -rf artifacts 

  notify-status:
    needs: check-e2e-status
    if: needs.check-e2e-status.outputs.status != 'proceed'
    runs-on: ubuntu-latest
    steps:
      - name: Log Status
        run: |
          echo "‚ö†Ô∏è Release Creation Status: ${{ needs.check-e2e-status.outputs.status }}"
          echo "Reason: ${{ needs.check-e2e-status.outputs.message }}"

      - name: Cancel Workflow
        if: needs.check-e2e-status.outputs.status == 'cancelled'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            await github.rest.actions.cancelWorkflowRun({
              owner,
              repo,
              run_id: context.runId
            });
            
            console.log('Workflow cancellation requested'); 