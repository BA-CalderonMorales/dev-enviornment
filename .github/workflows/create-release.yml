name: Create Comprehensive Release

# Only trigger after E2E tests complete successfully
on:
  workflow_run:
    workflows: ['E2E Integration Tests']
    types:
      - completed
    branches: [main, develop]

permissions:
  contents: write    # For creating releases
  packages: write    # For package operations
  actions: read      # For workflow access

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4

      # Download BitTorrent artifacts from the build workflow
      - name: Download BitTorrent Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bittorrent-artifacts
          path: artifacts/bittorrent
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # Download DockerHub artifacts
      - name: Download DockerHub Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dockerhub-artifacts
          path: artifacts/dockerhub
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      # Verify artifacts are present
      - name: Verify Artifacts
        run: |
          echo "Verifying required artifacts..."
          
          if [ ! -f "artifacts/bittorrent/dev-environment.torrent" ]; then
            echo "❌ BitTorrent torrent file missing"
            exit 1
          fi
          
          if [ ! -f "artifacts/bittorrent/magnet.txt" ]; then
            echo "❌ BitTorrent magnet link file missing"
            exit 1
          fi
          
          if [ ! -f "artifacts/dockerhub/image-info.json" ]; then
            echo "❌ DockerHub image info missing"
            exit 1
          fi
          
          echo "✅ All required artifacts present"

      # Generate release notes
      - name: Generate Release Notes
        run: |
          {
            echo "# 🚀 Development Environment Release"
            echo ""
            echo "## ⚠️ Important Notes"
            echo "- This is an automated release of the development environment"
            echo "- Distribution methods have varying reliability:"
            echo "  - DockerHub: Subject to Docker's rate limiting policies"
            echo "  - BitTorrent: Dependent on peer availability and network conditions"
            echo "- Users should not rely solely on this repository for production environments"
            echo "- Consider building and hosting your own images for commercial use"
            echo ""
            echo "## 🔄 Distribution Methods"
            echo ""
            echo "### DockerHub Distribution"
            echo "- Image: \`cmoe640/dev-environment:${GITHUB_SHA}\`"
            echo "- Status: Available (subject to rate limits)"
            echo "- Pull Command: \`docker pull cmoe640/dev-environment:${GITHUB_SHA}\`"
            echo ""
            echo "### BitTorrent Distribution"
            echo "- Magnet Link: $(cat artifacts/bittorrent/magnet.txt)"
            echo "- Torrent File: Attached to this release"
            echo "- Status: Experimental"
            echo ""
            echo "## 🛠️ Included Tools"
            echo "$(cat artifacts/dockerhub/image-info.json | jq -r '.tools')"
            echo ""
            echo "## 📝 Usage Notes"
            echo "- For personal/development use only"
            echo "- Test thoroughly before using in any production environment"
            echo "- Consider security implications of using pre-built environments"
            echo ""
            echo "## 🔍 Verification"
            echo "- E2E Tests Passed: ✅"
            echo "- Build Date: $(date -u +"%Y-%m-%d %H:%M UTC")"
            echo "- Commit: ${GITHUB_SHA}"
          } > RELEASE_NOTES.md

      # Create GitHub release
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(date +%Y%m%d%H%M)
          gh release create "v${VERSION}" \
            --title "Development Environment v${VERSION}" \
            --notes-file RELEASE_NOTES.md \
            artifacts/bittorrent/dev-environment.torrent \
            artifacts/dockerhub/image-info.json

      # Cleanup
      - name: Cleanup
        if: always()
        run: rm -rf artifacts 