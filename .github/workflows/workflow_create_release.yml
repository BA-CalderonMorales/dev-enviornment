name: Create Release

on:
  # Manual trigger with branch protection
  workflow_dispatch:
    inputs:
      trigger_sha:
        description: 'SHA to release (optional)'
        required: false
        type: string
      source_branch:
        description: 'Branch (must be beta or main)'
        required: false
        type: choice
        options:
        - beta
        - main
        default: 'beta'
      force_process:
        description: 'Force queue processing'
        required: false
        type: boolean
        default: false
  # Weekly scheduled release processing - only on beta/main
  schedule:
    # Run every Saturday at 10:00 AM CST (16:00 UTC)
    - cron: '0 16 * * SAT'

# Add concurrency to prevent multiple releases running simultaneously
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  MAINTAINER_GITHUB: '@BA-CalderonMorales'
  INITIAL_VERSION: 'v0.0.1'
  DOCKER_IMAGE: 'cmo640/dev-environment'

jobs:
  #####################################################################
  # Branch Protection Check
  # ---------------------
  # Purpose: Ensures releases only run on beta/main branches
  #
  # Flow:
  # 1. Validates branch name
  # 2. Blocks unauthorized release attempts
  # 3. Sets release type for downstream jobs
  #####################################################################
  branch_check:
    runs-on: ubuntu-22.04
    outputs:
      branch: ${{ steps.check.outputs.branch }}
      is_beta: ${{ steps.check.outputs.is_beta }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/check-branch
        id: check
        with:
          source_branch: ${{ github.event.inputs.source_branch }}
          github_ref: ${{ github.ref }}

  #####################################################################
  # Process Release Queue
  # -------------------
  # Purpose: Processes the release queue and prepares for release creation
  #
  # Flow:
  # 1. Gets next item from queue
  # 2. Verifies all prerequisites
  # 3. Sets up release parameters
  #####################################################################
  process_queue:
    needs: branch_check
    if: needs.branch_check.outputs.is_beta == 'true'
    runs-on: ubuntu-22.04
    outputs:
      sha: ${{ steps.queue.outputs.sha }}
      branch: ${{ steps.queue.outputs.branch }}
      can_proceed: ${{ steps.queue.outputs.can_proceed }}
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/initialize-labels
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Check manual inputs
      - uses: ./.github/actions/check-manual-inputs
        id: check_inputs
        with:
          trigger_sha: ${{ inputs.trigger_sha }}
          source_branch: ${{ inputs.source_branch }}

      # Validate release conditions
      - uses: ./.github/actions/validate-release-conditions
        id: validate
        with:
          branch_allowed: ${{ needs.branch_check.outputs.is_beta }}
          can_proceed: true  # Initial assumption, will be refined by queue processing
          using_manual_inputs: ${{ steps.check_inputs.outputs.using_manual_inputs }}
          is_scheduled: ${{ github.event_name == 'schedule' }}

      - uses: ./.github/actions/process-release-queue
        id: queue
        if: steps.validate.outputs.should_proceed == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_sha: ${{ inputs.trigger_sha }}
          source_branch: ${{ inputs.source_branch }}
          force_process: ${{ inputs.force_process }}
          is_scheduled: ${{ github.event_name == 'schedule' }}

      - uses: ./.github/actions/determine-version
        id: version
        if: steps.queue.outputs.can_proceed == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.queue.outputs.branch }}
          initial_version: ${{ env.INITIAL_VERSION }}

  #####################################################################
  # Create Release
  # -------------
  # Purpose: Creates the actual release if queue processing succeeded
  #
  # Flow:
  # 1. Creates GitHub release
  # 2. Updates Docker tags
  # 3. Updates documentation
  #####################################################################
  create_release:
    needs: [branch_check, process_queue]
    if: |
      needs.branch_check.outputs.is_beta == 'true' &&
      needs.process_queue.outputs.can_proceed == 'true'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.process_queue.outputs.version }}
          prerelease: ${{ needs.process_queue.outputs.prerelease }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          bot_github_token: ${{ secrets.BOT_GITHUB_TOKEN }}
          bot_email: ${{ secrets.BOT_EMAIL }}
          bot_name: ${{ secrets.BOT_NAME }}
          bot_domain: ${{ secrets.BOT_DOMAIN }}

      - name: Update Docker Tags
        uses: ./.github/actions/update-docker-tags
        with:
          docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
          docker_token: ${{ secrets.DOCKERHUB_TOKEN }}
          docker_image: ${{ env.DOCKER_IMAGE }}
          version: ${{ needs.process_queue.outputs.version }}
          docker_tag: ${{ contains(needs.process_queue.outputs.branch, 'beta') && 'beta' || 'latest' }}

  #####################################################################
  # Handle Failure
  # -------------
  # Purpose: Handles any failures in the release process
  #####################################################################
  handle_failure:
    needs: [branch_check, process_queue, create_release]
    if: |
      always() &&
      (needs.branch_check.outputs.is_beta == 'true' && failure())
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/handle-release-failure
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          maintainer: ${{ env.MAINTAINER_GITHUB }}
          sha: ${{ needs.process_queue.outputs.sha }}
          branch: ${{ needs.process_queue.outputs.branch }}