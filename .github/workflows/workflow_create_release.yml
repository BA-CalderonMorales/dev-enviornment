name: Create Release

on:
  workflow_dispatch:
    inputs:
      trigger_sha:
        description: 'SHA that triggered the release'
        required: true
        type: string
      source_branch:
        description: 'Branch that triggered the release'
        required: true
        type: string
  schedule:
    - cron: '*/15 * * * *'  # Process queue every 15 minutes

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  MAINTAINER_GITHUB: '@yourgithubusername'
  INITIAL_VERSION: 'v0.0.1'
  DOCKER_IMAGE: 'your-dockerhub-username/image-name'

jobs:
  #####################################################################
  # Process Release Queue
  # -------------------
  # Purpose: Processes the release queue and prepares for release creation
  #
  # Flow:
  # 1. Gets next item from queue
  # 2. Verifies all prerequisites
  # 3. Sets up release parameters
  #####################################################################
  process_queue:
    runs-on: ubuntu-22.04
    outputs:
      sha: ${{ steps.queue.outputs.sha }}
      branch: ${{ steps.queue.outputs.branch }}
      can_proceed: ${{ steps.queue.outputs.can_proceed }}
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/initialize-labels
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - id: queue
        uses: ./.github/actions/process-release-queue
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trigger_sha: ${{ inputs.trigger_sha }}
          source_branch: ${{ inputs.source_branch }}

      - id: version
        if: steps.queue.outputs.can_proceed == 'true'
        uses: ./.github/actions/determine-version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.queue.outputs.branch }}
          initial_version: ${{ env.INITIAL_VERSION }}

  #####################################################################
  # Create Release
  # -------------
  # Purpose: Creates the actual release if queue processing succeeded
  #
  # Flow:
  # 1. Creates GitHub release
  # 2. Updates Docker tags
  # 3. Updates documentation
  #####################################################################
  create_release:
    needs: process_queue
    if: needs.process_queue.outputs.can_proceed == 'true'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.process_queue.outputs.version }}
          prerelease: ${{ needs.process_queue.outputs.prerelease }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          bot_github_token: ${{ secrets.BOT_GITHUB_TOKEN }}
          bot_email: ${{ secrets.BOT_EMAIL }}
          bot_name: ${{ secrets.BOT_NAME }}
          bot_domain: ${{ secrets.BOT_DOMAIN }}

      - name: Update Docker Tags
        uses: ./.github/actions/update-docker-tags
        with:
          docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
          docker_token: ${{ secrets.DOCKERHUB_TOKEN }}
          docker_image: ${{ env.DOCKER_IMAGE }}
          version: ${{ needs.process_queue.outputs.version }}
          docker_tag: ${{ contains(needs.process_queue.outputs.branch, 'beta') && 'beta' || 'latest' }}

  #####################################################################
  # Handle Failure
  # -------------
  # Purpose: Handles any failures in the release process
  #####################################################################
  handle_failure:
    needs: [process_queue, create_release]
    if: failure()
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/handle-release-failure
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          maintainer: ${{ env.MAINTAINER_GITHUB }}
          sha: ${{ needs.process_queue.outputs.sha }}
          branch: ${{ needs.process_queue.outputs.branch }}