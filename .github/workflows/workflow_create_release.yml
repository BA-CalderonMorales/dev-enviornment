name: Create Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - beta
      - 'release-*'
  pull_request:
    branches:
      - main
      - beta
      - 'release-*'
    paths:
      - '.github/workflows/create_release.yml'
      - 'version.txt'
      - 'CHANGELOG.md'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. v1.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: true
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes

env:
  MAINTAINER_GITHUB: '@yourgithubusername'  # Replace with your GitHub username
  INITIAL_VERSION: 'v0.0.1'
  DOCKER_IMAGE: 'your-dockerhub-username/image-name'  # Replace with your image name

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  #####################################################################
  # Create Release
  # -------------
  # Purpose: Creates GitHub releases and updates Docker tags
  #
  # Flow:
  # 1. Verifies distribution workflow success
  # 2. Determines version based on branch
  # 3. Creates GitHub release
  # 4. Updates Docker tags
  #
  # Dependencies: None
  # Outputs: None
  # Used by: N/A - Final job
  #####################################################################
  create_release:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version calculations
      
      - name: Check Distribution Status
        id: check_distribution
        uses: ./.github/actions/check-distribution-status
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          maintainer: ${{ env.MAINTAINER_GITHUB }}
          event_sha: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Wait for Queue
        if: steps.check_distribution.outputs.can_proceed != 'true'
        run: |
          echo "This release is waiting in queue. Will be retried automatically when previous releases complete."
          exit 1

      - name: Determine Version
        id: version
        uses: ./.github/actions/determine-version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          initial_version: ${{ env.INITIAL_VERSION }}
          ref: ${{ github.ref }}
          input_version: ${{ inputs.version }}
          input_prerelease: ${{ inputs.prerelease }}

      - name: Create Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ steps.version.outputs.version }}
          prerelease: ${{ steps.version.outputs.prerelease }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          bot_github_token: ${{ secrets.BOT_GITHUB_TOKEN }}
          bot_email: ${{ secrets.BOT_EMAIL }}
          bot_name: ${{ secrets.BOT_NAME }}
          bot_domain: ${{ secrets.BOT_DOMAIN }}

      - name: Update Docker Tags
        if: success() && (github.ref == 'refs/heads/beta' || github.ref == 'refs/heads/main')
        uses: ./.github/actions/update-docker-tags
        with:
          docker_username: ${{ secrets.DOCKERHUB_USERNAME }}
          docker_token: ${{ secrets.DOCKERHUB_TOKEN }}
          docker_image: ${{ env.DOCKER_IMAGE }}
          version: ${{ steps.version.outputs.version }}
          docker_tag: ${{ steps.version.outputs.docker_tag }}

  process_release_queue:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process Queue
        id: process_queue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get queue issue
          QUEUE_ISSUE=$(gh issue list --label "release-queue" --json number --jq '.[0].number')
          if [[ -z "$QUEUE_ISSUE" ]]; then
            echo "No queue found. Exiting."
            exit 0
          fi
          
          # Get oldest queued item from comments
          NEXT_RELEASE=$(gh issue view "$QUEUE_ISSUE" --json comments \
            --jq '.comments[].body | select(startswith("QUEUED:")) | split("\n")[0]' \
            | head -n 1)
          
          if [[ -z "$NEXT_RELEASE" ]]; then
            echo "Queue is empty. Exiting."
            exit 0
          fi
          
          # Parse release info
          SHA=$(echo "$NEXT_RELEASE" | grep -o 'SHA:[^|]*' | cut -d: -f2)
          BRANCH=$(echo "$NEXT_RELEASE" | grep -o 'BRANCH:[^|]*' | cut -d: -f2)
          
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "queue_issue=$QUEUE_ISSUE" >> $GITHUB_OUTPUT
          echo "queue_entry=$NEXT_RELEASE" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.process_queue.outputs.sha != ''
        uses: ./.github/actions/create-release
        with:
          version: ${{ steps.version.outputs.version }}
          prerelease: ${{ contains(steps.process_queue.outputs.branch, 'beta') }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          bot_gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          bot_gpg_passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          bot_github_token: ${{ secrets.BOT_GITHUB_TOKEN }}
          bot_email: ${{ secrets.BOT_EMAIL }}
          bot_name: ${{ secrets.BOT_NAME }}
          bot_domain: ${{ secrets.BOT_DOMAIN }}

      - name: Update Queue
        if: steps.process_queue.outputs.queue_issue != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Remove processed entry from queue
          gh issue comment "${{ steps.process_queue.outputs.queue_issue }}" \
            --body "PROCESSED:${{ steps.process_queue.outputs.queue_entry }}"
          
          # Update issue to show processing completed
          gh issue edit "${{ steps.process_queue.outputs.queue_issue }}" \
            --body "Last processed: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: Handle Release Failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create \
            --title "⚠️ Release Creation Failed" \
            --body "Failed to process release for SHA:${{ steps.process_queue.outputs.sha }} (${{ steps.process_queue.outputs.branch }}). CC: ${{ env.MAINTAINER_GITHUB }}" \
            --label "bug,release-failed"