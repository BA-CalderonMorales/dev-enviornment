name: Create Release Job

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        description: 'Version to release'
      prerelease:
        required: false
        type: boolean
        description: 'Is this a prerelease'
        default: false
    secrets:
      GITHUB_TOKEN:
        required: true
      BOT_GITHUB_TOKEN:
        required: true
      BOT_GPG_PRIVATE_KEY:
        required: true
      BOT_GPG_PASSPHRASE:
        required: true
      BOT_EMAIL:
        required: true
      BOT_NAME:
        required: true
      BOT_DOMAIN:
        required: true

jobs:
  create:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Download distribution artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: distribution.yml
          workflow_conclusion: success
          name: direct-download-artifacts
          path: artifacts/direct_download

      - name: Verify artifacts
        run: |
          if [ ! -f "artifacts/direct_download/dev-environment.tar" ] || [ ! -f "artifacts/direct_download/checksum.txt" ]; then
            echo "Error: Required artifacts not found. Ensure distribution workflow completed successfully."
            exit 1
          fi

      - name: Set release info
        id: release_info
        run: |
          if [[ ${{ github.ref }} == refs/heads/beta ]]; then
            echo "version=$(date +'%Y.%m.%d')-beta" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=Beta Release" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=Stable Release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          name: "${{ steps.release_info.outputs.release_type }} ${{ steps.release_info.outputs.version }}"
          body: |
            ## ${{ steps.release_info.outputs.release_type }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Distribution Methods
            - DockerHub: `cmoe640/dev-environment:${{ steps.release_info.outputs.version }}`
            - Direct Download: See release assets below
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}
          files: |
            artifacts/direct_download/dev-environment.tar
            artifacts/direct_download/checksum.txt
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Update Documentation Links
        env:
          GH_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          BOT_EMAIL: ${{ secrets.BOT_EMAIL }}
          BOT_NAME: ${{ secrets.BOT_NAME }}
          BOT_DOMAIN: ${{ secrets.BOT_DOMAIN }}
        run: |
          # Get latest release tag
          RELEASE_TAG=$(gh release list -L 1 | cut -f1)
          
          # Update Quick Start guide with latest direct download link
          sed -i "s|releases/[^/]*/download/|releases/latest/download/|g" docs/QUICK_START.md
          
          git config user.name "${BOT_NAME}"
          git config user.email "${BOT_EMAIL}@${BOT_DOMAIN}"
          git add docs/QUICK_START.md
          git commit -S -m "docs: update distribution links to ${RELEASE_TAG}" || true
          git push origin HEAD:${{ github.ref_name }}
