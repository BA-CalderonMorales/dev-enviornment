name: 'Process Release Queue'
description: 'Processes release queue items and determines if a release should be created'

inputs:
  github_token:
    required: true
  source_branch:
    required: true
  force_process:
    required: false
    default: 'false'
  initial_version:
    required: true

outputs:
  can_proceed:
    description: 'Whether to proceed with release'
    value: ${{ steps.queue_check.outputs.can_proceed }}
  version:
    description: 'Version to release'
    value: ${{ steps.queue_check.outputs.version }}
  prerelease:
    description: 'Whether this is a prerelease'
    value: ${{ steps.queue_check.outputs.is_beta }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: ./.github/actions/initialize-labels
      with:
        github_token: ${{ inputs.github_token }}

    - id: queue_check
      shell: bash
      run: |
        # Get queue file path from branch
        if [[ "${{ inputs.source_branch }}" == "beta" ]]; then
          QUEUE_FILE=".github/release_queue/beta.json"
          MIN_QUEUE_SIZE=10  # Increased: Wait for 10 items before beta release
          MIN_AGE_DAYS=0     # No waiting period for beta
        elif [[ "${{ inputs.source_branch }}" == "main" ]]; then
          QUEUE_FILE=".github/release_queue/main.json"
          MIN_QUEUE_SIZE=15  # Increased: Wait for 15 items before stable release
          MIN_AGE_DAYS=14    # Increased: Two weeks stability period
        else
          echo "Invalid branch: ${{ inputs.source_branch }}"
          exit 1
        fi

        # Create queue if it doesn't exist
        mkdir -p .github/release_queue
        if [ ! -f "$QUEUE_FILE" ]; then
          echo '{"items":[]}' > "$QUEUE_FILE"
        fi

        # Check queue conditions
        QUEUE_SIZE=$(jq '.items | length' "$QUEUE_FILE")
        OLDEST_ITEM_DATE=$(jq -r '.items[0].date // empty' "$QUEUE_FILE")
        
        if [ ! -z "$OLDEST_ITEM_DATE" ]; then
          DAYS_OLD=$(( ( $(date +%s) - $(date -d "$OLDEST_ITEM_DATE" +%s) ) / 86400 ))
        else
          DAYS_OLD=0
        fi

        # Determine if release should proceed
        if [ "${{ inputs.force_process }}" == "true" ]; then
          CAN_PROCEED="true"
          echo "Force processing requested"
        elif [ $QUEUE_SIZE -ge $MIN_QUEUE_SIZE ] && [ $DAYS_OLD -ge $MIN_AGE_DAYS ]; then
          CAN_PROCEED="true"
          echo "Queue requirements met: size=$QUEUE_SIZE items, age=$DAYS_OLD days"
        else
          CAN_PROCEED="false"
          echo "Queue requirements not met: $QUEUE_SIZE/$MIN_QUEUE_SIZE items, $DAYS_OLD/$MIN_AGE_DAYS days"
        fi

        # Set outputs
        echo "can_proceed=$CAN_PROCEED" >> $GITHUB_OUTPUT
        echo "is_beta=${{ inputs.source_branch == 'beta' && 'true' || 'false' }}" >> $GITHUB_OUTPUT
        
        if [ "$CAN_PROCEED" == "true" ]; then
          # Get list of commits to include in release
          COMMITS=$(jq -r '.items[].commit' "$QUEUE_FILE")
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          
          # Clear queue if release proceeding
          echo '{"items":[]}' > "$QUEUE_FILE"
        fi

    - id: version
      if: steps.queue_check.outputs.can_proceed == 'true'
      uses: ./.github/actions/determine-version
      with:
        github_token: ${{ inputs.github_token }}
        ref: ${{ inputs.source_branch }}
        initial_version: ${{ inputs.initial_version }}

    - name: Debug Version Output
      if: steps.version.outputs.version
      shell: bash
      run: |
        echo "Version determined: ${{ steps.version.outputs.version }}"
        echo "Is prerelease: ${{ steps.version.outputs.prerelease }}"
