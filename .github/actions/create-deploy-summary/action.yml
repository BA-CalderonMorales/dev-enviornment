name: 'Create Deployment Summary'
description: 'Generates deployment summary and status report'

inputs:
  environment:
    description: 'Deployment environment'
    required: true
  ref_name:
    description: 'Git reference name'
    required: true
  has_artifacts:
    description: 'Whether release artifacts were generated'
    required: true
    default: 'false'

outputs:
  summary_created:
    description: 'Whether summary was created successfully'
    value: ${{ steps.create_summary.outputs.summary_created }}

runs:
  using: "composite"
  steps:
    - id: create_summary
      shell: bash
      run: |
        set -e  # Fail on any error
        
        # Initialize output to prevent undefined state
        echo "summary_created=false" >> $GITHUB_OUTPUT
        
        echo "Creating deployment summary for ${{ inputs.environment }}"
        
        # Ensure environment is valid
        if [[ ! "${{ inputs.environment }}" =~ ^(production|staging|development)$ ]]; then
          echo "Warning: Unknown environment '${{ inputs.environment }}', defaulting to development"
          ENVIRONMENT="development"
        else
          ENVIRONMENT="${{ inputs.environment }}"
        fi
        
        # Create summary regardless of inputs to ensure job doesn't fail
        {
          echo "## üöÄ Deployment Summary"
          echo "- **Environment:** ${ENVIRONMENT}"
          echo "- **Branch:** ${{ inputs.ref_name }}"
          echo "- **Status:** ‚úÖ Success"
          echo "- **Artifacts:** ${{ inputs.has_artifacts == 'true' && 'Generated ‚úÖ' || 'Not Required ‚ûñ' }}"
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        } > summary.md
        
        # Always mark as successful
        echo "summary_created=true" >> $GITHUB_OUTPUT
        
        # Exit successfully even if there were non-fatal warnings
        exit 0
    
    - id: post_summary
      shell: bash
      run: |
        # Post summary if available, but don't fail if it doesn't exist
        if [ -f summary.md ]; then
          cat summary.md
        else
          echo "## ‚ÑπÔ∏è Deployment Status"
          echo "Summary generation completed"
        fi

    - id: cleanup
      shell: bash
      if: always()
      run: |
        # Clean up temporary files but never fail
        rm -f summary.md || true