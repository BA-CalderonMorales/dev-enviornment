name: 'Process Release Queue'
description: 'Processes the release queue and determines next release'

inputs:
  github_token:
    description: 'GitHub token for API access'
    required: true
  trigger_sha:
    description: 'SHA that triggered the workflow'
    required: false
  source_branch:
    description: 'Branch that triggered the workflow'
    required: false
  force_process:
    description: 'Force queue processing'
    required: false
    default: 'false'
  is_scheduled:
    description: 'Whether this is a scheduled run'
    required: false
    default: 'false'

outputs:
  sha:
    description: 'SHA to release'
    value: ${{ steps.process.outputs.sha }}
  branch:
    description: 'Branch being released'
    value: ${{ steps.process.outputs.branch }}
  can_proceed:
    description: 'Whether release can proceed'
    value: ${{ steps.process.outputs.can_proceed }}

runs:
  using: composite
  steps:
    - id: process
      shell: bash
      run: |
        # Function to log with timestamp
        log_msg() {
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - $1"
        }

        # Handle direct trigger with SHA/branch
        if [[ -n "${{ inputs.trigger_sha }}" && -n "${{ inputs.source_branch }}" ]]; then
          log_msg "Processing direct trigger"
          echo "sha=${{ inputs.trigger_sha }}" >> $GITHUB_OUTPUT
          echo "branch=${{ inputs.source_branch }}" >> $GITHUB_OUTPUT
          echo "can_proceed=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Get queue issue
        QUEUE_ISSUE=$(gh issue list --label "release-queue" --json number --jq '.[0].number')
        if [[ -z "$QUEUE_ISSUE" ]]; then
          log_msg "No release queue found"
          if [[ "${{ inputs.force_process }}" == "true" ]]; then
            log_msg "Force processing enabled - creating queue"
            QUEUE_ISSUE=$(gh issue create \
              --title "ðŸ”„ Release Queue" \
              --body "Automated release queue management system." \
              --label "release-queue" | grep -o '[0-9]*$')
          else
            log_msg "Exiting - no force process flag"
            echo "can_proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        # Get next queued item
        NEXT_RELEASE=$(gh issue view "$QUEUE_ISSUE" --json comments \
          --jq '.comments[].body | select(startswith("QUEUED:")) | split("\n")[0]' \
          | head -n 1)

        if [[ -z "$NEXT_RELEASE" ]]; then
          log_msg "Queue is empty"
          if [[ "${{ inputs.is_scheduled }}" == "true" ]]; then
            log_msg "Scheduled run - updating queue status"
            gh issue comment "$QUEUE_ISSUE" --body "Weekly check: Queue empty at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          fi
          echo "can_proceed=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Parse release info
        SHA=$(echo "$NEXT_RELEASE" | grep -o 'SHA:[^|]*' | cut -d: -f2)
        BRANCH=$(echo "$NEXT_RELEASE" | grep -o 'BRANCH:[^|]*' | cut -d: -f2)

        log_msg "Processing release: SHA=$SHA BRANCH=$BRANCH"
        echo "sha=$SHA" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "can_proceed=true" >> $GITHUB_OUTPUT

        # Mark as processing
        gh issue comment "$QUEUE_ISSUE" --body "PROCESSING:$NEXT_RELEASE at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      env:
        GH_TOKEN: ${{ inputs.github_token }}
