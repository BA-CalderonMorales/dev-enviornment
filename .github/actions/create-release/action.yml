name: 'Create Release'
description: 'Creates a new release by packaging current codebase and Docker state'

inputs:
  version:
    description: 'Version to release'
    required: true
  prerelease:
    description: 'Whether this is a prerelease'
    required: true
  github_token:
    description: 'GitHub token for creating release'
    required: true
  bot_gpg_private_key:
    description: 'Bot GPG private key for signing'
    required: true
  bot_gpg_passphrase:
    description: 'Bot GPG passphrase'
    required: true
  bot_github_token:
    description: 'Bot GitHub token'
    required: true
  bot_email:
    description: 'Bot email for git config'
    required: true
  bot_name:
    description: 'Bot name for git config'
    required: true
  bot_domain:
    description: 'Bot domain for config'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for proper versioning

    - name: Extract current Docker image state
      shell: bash
      run: |
        # The Docker tag (:beta or :latest) represents our current stable state
        # We pull this instead of building new to ensure consistency
        echo "Pulling current Docker state from ${{ inputs.version }}"
        docker pull cmo640/dev-environment:${{ inputs.version }}
        
        # Create staging area for release assets
        mkdir -p release_assets
        
        # Extract current application state from Docker image
        # This ensures our release matches exactly what's in production/beta
        docker create --name temp_container cmo640/dev-environment:${{ inputs.version }}
        docker cp temp_container:/app/. ./release_assets/
        docker rm temp_container
        
        # Package everything into a distributable archive
        # This becomes our binary release asset
        cd release_assets
        tar -czf ../dev-environment.tar.gz .
        cd ..
        
        # Generate checksums for verification
        sha256sum dev-environment.tar.gz > checksum.txt
        echo "Release archive and checksums created"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.version }}
        name: "${{ inputs.prerelease && 'Beta' || 'Stable' }} Release ${{ inputs.version }}"
        body: |
          ## Release Notes
          
          ${{ inputs.release_notes }}
          
          ### Changes Included
          The following changes are included in this release:
          
          ${{ steps.process.outputs.notes }}
          
          ### Distributions
          
          #### Docker Image
          ```bash
          docker pull cmo640/dev-environment:${{ inputs.version }}
          ```
          
          This image represents the current ${{ inputs.prerelease && 'beta' || 'production' }} state.
          
          #### Binary Distribution
          A standalone environment tarball is available for non-Docker users.
          
          ### Verification
          SHA256 Checksums:
          ```
          $(cat checksum.txt)
          ```
          
          ### Additional Notes
          - Environment: ${{ inputs.prerelease && 'Beta Testing' || 'Production' }}
          - Released: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Branch: ${{ steps.process.outputs.branch }}
          
          For detailed documentation, please see our [Quick Start Guide](docs/QUICK_START.md).
        
        prerelease: ${{ inputs.prerelease }}
        files: |
          dev-environment.tar.gz
          checksum.txt
        draft: false
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Import GPG key
      shell: bash
      run: |
        echo "${{ inputs.bot_gpg_private_key }}" | gpg --batch --import
        echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye
      env:
        GPG_TTY: $(tty)
        GPG_PASSPHRASE: ${{ inputs.bot_gpg_passphrase }}

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "${{ inputs.bot_name }}"
        git config --global user.email "${{ inputs.bot_email }}"
        git config --global user.signingkey "${{ inputs.bot_gpg_private_key }}"
        git config --global commit.gpgsign true

    - name: Update Documentation Links
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.bot_github_token }}
        BOT_EMAIL: ${{ inputs.bot_email }}
        BOT_NAME: ${{ inputs.bot_name }}
        BOT_DOMAIN: ${{ inputs.bot_domain }}
      run: |
        # Keep documentation pointing to latest release for easier user access
        RELEASE_TAG=$(gh release list -L 1 | cut -f1)
        sed -i "s|releases/[^/]*/download/|releases/latest/download/|g" docs/QUICK_START.md
        
        # Update documentation with bot credentials for tracking
        git config user.name "${BOT_NAME}"
        git config user.email "${BOT_EMAIL}@${BOT_DOMAIN}"
        git add docs/QUICK_START.md
        git commit -S -m "docs: update distribution links to ${RELEASE_TAG}" || true
        git push origin HEAD:${{ github.ref_name }}