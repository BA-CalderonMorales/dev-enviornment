name: 'Create Release'
description: 'Creates a new release with proper versioning and tags'

inputs:
  version:
    description: 'Version to release'
    required: true
  prerelease:
    description: 'Whether this is a prerelease'
    required: true
  github_token:
    description: 'GitHub token for creating release'
    required: true
  bot_gpg_private_key:
    description: 'Bot GPG private key for signing'
    required: true
  bot_gpg_passphrase:
    description: 'Bot GPG passphrase'
    required: true
  bot_github_token:
    description: 'Bot GitHub token'
    required: true
  bot_email:
    description: 'Bot email for git config'
    required: true
  bot_name:
    description: 'Bot name for git config'
    required: true
  bot_domain:
    description: 'Bot domain for config'
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Download distribution artifacts
      uses: dawidd6/action-download-artifact@v3
      with:
        github_token: ${{ inputs.github_token }}
        workflow: distribution.yml
        workflow_conclusion: success
        name: direct-download-artifacts
        path: artifacts/direct_download

    - name: Verify artifacts
      shell: bash
      run: |
        if [ ! -f "artifacts/direct_download/dev-environment.tar" ] || [ ! -f "artifacts/direct_download/checksum.txt" ]; then
          echo "Error: Required artifacts not found. Ensure distribution workflow completed successfully."
          exit 1
        fi

    - name: Set release info
      id: release_info
      shell: bash
      run: |
        if [[ ${{ github.ref }} == refs/heads/beta ]]; then
          echo "version=$(date +'%Y.%m.%d')-beta" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "release_type=Beta Release" >> $GITHUB_OUTPUT
        else
          echo "version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "release_type=Stable Release" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        name: "${{ steps.release_info.outputs.release_type }} ${{ steps.release_info.outputs.version }}"
        body: |
          ## ${{ steps.release_info.outputs.release_type }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
          
          ### Distribution Methods
          - DockerHub: `cmoe640/dev-environment:${{ steps.release_info.outputs.version }}`
          - Direct Download: See release assets below
        prerelease: ${{ steps.release_info.outputs.is_prerelease }}
        files: |
          artifacts/direct_download/dev-environment.tar
          artifacts/direct_download/checksum.txt
        draft: false
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Import GPG key
      shell: bash
      run: |
        echo "${{ inputs.bot_gpg_private_key }}" | gpg --batch --import
        echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye
      env:
        GPG_TTY: $(tty)

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "${{ inputs.bot_name }}"
        git config --global user.email "${{ inputs.bot_email }}"
        git config --global user.signingkey "${{ inputs.bot_gpg_private_key }}"
        git config --global commit.gpgsign true

    - name: Update Documentation Links
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.bot_github_token }}
        BOT_EMAIL: ${{ inputs.bot_email }}
        BOT_NAME: ${{ inputs.bot_name }}
        BOT_DOMAIN: ${{ inputs.bot_domain }}
      run: |
        RELEASE_TAG=$(gh release list -L 1 | cut -f1)
        sed -i "s|releases/[^/]*/download/|releases/latest/download/|g" docs/QUICK_START.md
        git config user.name "${BOT_NAME}"
        git config user.email "${BOT_EMAIL}@${BOT_DOMAIN}"
        git add docs/QUICK_START.md
        git commit -S -m "docs: update distribution links to ${RELEASE_TAG}" || true
        git push origin HEAD:${{ github.ref_name }}