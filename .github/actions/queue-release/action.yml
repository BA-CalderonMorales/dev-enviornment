name: 'Queue Release'
description: 'Adds a commit to the release queue via PR'

inputs:
  github_token:
    required: true
  sha:
    required: true
  branch:
    required: true
  bot_gpg_private_key:
    required: true
    description: 'Bot GPG private key for signing'
  bot_gpg_passphrase:
    required: true
    description: 'Bot GPG passphrase'
  bot_email:
    required: true
    description: 'Bot email for git config'

outputs:
  queue_position:
    description: 'Position in queue'
    value: ${{ steps.queue.outputs.position }}
  estimated_time:
    description: 'Estimated time until release'
    value: ${{ steps.queue.outputs.estimated_time }}
  pr_number:
    description: 'Created PR number'
    value: ${{ steps.create_pr.outputs.pr_number }}

runs:
  using: 'composite'
  steps:
    - id: setup
      shell: bash
      run: |
        # Create a new branch for the queue update
        QUEUE_BRANCH="queue-update-$(date +%s)"
        git checkout -b $QUEUE_BRANCH
        echo "branch=$QUEUE_BRANCH" >> $GITHUB_OUTPUT

    - id: queue
      shell: bash
      run: |
        # Determine queue file based on branch
        QUEUE_FILE=".github/release_queue/${{ inputs.branch }}.json"
        
        # Create queue directory if needed
        mkdir -p .github/release_queue
        
        # Create or read queue file
        if [ ! -f "$QUEUE_FILE" ]; then
          echo '{"items":[]}' > "$QUEUE_FILE"
        fi
        
        # Add new item to queue
        jq --arg sha "${{ inputs.sha }}" \
           --arg date "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
           '.items += [{"commit": $sha, "date": $date}]' \
           "$QUEUE_FILE" > "${QUEUE_FILE}.tmp" && mv "${QUEUE_FILE}.tmp" "$QUEUE_FILE"
        
        # Calculate queue position and estimated time
        POSITION=$(jq '.items | length' "$QUEUE_FILE")
        
        if [[ "${{ inputs.branch }}" == "beta" ]]; then
          EST_DAYS=0
          MIN_ITEMS=10
        else
          EST_DAYS=14
          MIN_ITEMS=15
        fi
        
        echo "position=$POSITION" >> $GITHUB_OUTPUT
        echo "estimated_time=$EST_DAYS days" >> $GITHUB_OUTPUT
        echo "remaining=$((MIN_ITEMS - POSITION))" >> $GITHUB_OUTPUT

    - name: Setup GPG
      shell: bash
      run: |
        # Create GPG directories with proper permissions
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        
        # Import the GPG private key
        echo "${{ inputs.bot_gpg_private_key }}" | gpg --batch --import
        
        # Get the GPG key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
        
        # Configure Git with GPG
        git config --global user.signingkey "$GPG_KEY_ID"
        git config --global commit.gpgsign true
        git config --global user.name "Development Environment Bot"
        git config --global user.email "${{ inputs.bot_email }}"
        
        # Configure GPG agent
        echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
        echo "RELOADAGENT" | gpg-connect-agent
        
        # Trust the key ultimately
        echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "$GPG_KEY_ID" trust
      env:
        GNUPGHOME: /home/runner/.gnupg

    - name: Sign Commit
      shell: bash
      run: |
        # Add changes
        git add .github/release_queue/
        
        # Create signed commit
        git -c gpg.program="$(which gpg)" \
            -c user.signingkey="$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)" \
            commit -S -m "ðŸ“¦ Queue release for ${{ inputs.sha }}
        
        Queue Status:
        - Position: ${{ steps.queue.outputs.position }}
        - Items needed: ${{ steps.queue.outputs.remaining }} more
        - Estimated time: ${{ steps.queue.outputs.estimated_time }}"
      env:
        GPG_TTY: $(tty)
        GNUPGHOME: /home/runner/.gnupg
        GPG_PASSPHRASE: ${{ inputs.bot_gpg_passphrase }}

    - name: Push Changes
      shell: bash
      run: |
        git push origin ${{ steps.setup.outputs.branch }}

    - id: create_pr
      shell: bash
      run: |
        PR_TITLE="ðŸ“¦ Update Release Queue: Position ${{ steps.queue.outputs.position }}"
        PR_BODY="## Release Queue Update
        
        ðŸŽ¯ Adding commit \`${{ inputs.sha }}\` to the release queue.
        
        ### Queue Status
        - Current Position: ${{ steps.queue.outputs.position }}
        - Items Needed: ${{ steps.queue.outputs.remaining }} more
        - Estimated Release Time: ${{ steps.queue.outputs.estimated_time }}
        
        > This PR was automatically created by the release queue system.
        > Once merged, this commit will be included in the next release batch."
        
        PR_NUMBER=$(gh pr create \
          --title "$PR_TITLE" \
          --body "$PR_BODY" \
          --base "${{ inputs.branch }}" \
          --head "${{ steps.setup.outputs.branch }}" \
          --label "release-queue" \
          --label "automated-pr" \
          --json number -q .number)
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Request Review
      if: steps.create_pr.outputs.pr_number
      shell: bash
      run: |
        gh pr review ${{ steps.create_pr.outputs.pr_number }} --approve
      env:
        GH_TOKEN: ${{ inputs.github_token }}
